There are four types of four types of timer modes:
  1. Normal mode
  2. CTC(Clear Timer on Compare Match)Mode
  3. Past PWM Mode
  4. PC(Phase Correct)PWM Mode

Calculating the frequency(formula):
----Normal Mode----
f = clock/(prescale * TCNT)

Interrupt Cycle-Timer overflow
(f)^-1
*** t = (prescale * TCNT)/clock

원하는 시간에 대한 TCNT OR OCR 값 구하기
TCNT = (clock * t)/prescale


*** Main Clock has the frequency of 16MHz ***

TCCR0A = 해당 레지스터는 타이머/카운터 0번의 동작방식에 대한 모든 것을 컨트롤하는 레지스터입니다.
         오버플로우 사용시에는 그냥 TCCR0A = 0x00 값을 주면 문제없이 작동한다.


TOP 값은 8비트 오버플로우 값 16진수 0xFF, 10진수로 256을 의미 또는 OCR0A/B 레지스터에 직접 입력한 값입니다.

TCCR0B = 타이머/카운터0 설정시에 가장 중요한 레지스터라고 할 수 있다.
여기서 분주비를 잘못 설정하면 타이머/카운터의 동작시간이 완저히 맞지 않게 된다. 먼저 가상 하드웨어가 8MHz 크리스탈을 사용할때. 이 주파수의 주기를 구하면 0.125마이크로초
마다 한 신호가 발생하게 된다, 그걸 이용하요 20 밀리초의 시간을 만들고자 하는데 또 문제가 8비트 AVR은 256까지 밖에 카운팅을 하지 못하는데, 0.000000125초를 256번
다 세었더라도 약 3.2micro sec 밖에 나오지 않는다. 따라서 TCCR0B의 분주 옵션으로 한 신호(주기)의 시간을 낮추어 주어야 한다.

----TCNT 레지스터 및 시간 계산 공식----
** 클럭을 카운터한 값을 가지고 있는 레지스터
** 16MHz의 시스템 클럭을 쓰는 시스템에서는 TCNT0의 값은 1(분주비)/16000000hz = 62.5ns 마다 1씩 증가한다. (분주비 1일 경우)

--- 노멀모드 ---
1. 8bit 타이머의 경우 0부터 255까지 계속 증가하고 255를 넘으면 다시 0부터 증가를 반복한다.
2. 타이머 오버플로우 인터럽트를 허용해 놓으면 255에서 0으로 갈 때 인터럽트가 걸리게 된다.
3. 원하는 시간간격으로 인터럽트를 주기 위해 인터럽트 서비스 루틴 첫부분에 TCNT값을 쓰면 된다.

예) main 클럭이 16MHz이고 분주비가 256이면 62500hz가 되고 주기는 16us인데 256(8비트)을 곱하면 4.096ms 마다 인터럽트가 걸리게 된다. 그런데 2ms 마다 인터럽트를 걸고 싶으면 
인터럽트가 걸리자마자 TCNT의 값을 130으로 적어준다. 그럼 TCNT의 값은 130~255까지의 계수동작을 반복하고 2ms마다 인터럽트가 걸리게 된다.

--수학적 공식으로 보기--

    -> 1/16000000 = 0.0000000625 = 62.5ns
    -> 256 prescaler, 1/(16000000*256) = 0.000016 = 16us
    -> 8bit timer overflow interrupt 허용시 TCNT는 0부터 255까지(256개) 반복한다
    -> 16us * 256 = 4.096ms
    -> TCNT0를 130부터 255까지 반복하게 끔 했을 때
    -> 16us * (256 -130) = 2ms

---TCNT0을 사용해서 원하느 시간 만드는 공식---

    -> TCNT0 = (타이머 TOP값(8bit 타이머이므로 2^8 = 256) -1) - ((원하는시간) * (클럭/분주비))
    -> 2ms를 만들 때, TCNT0 = (256 - 1)<고정값> - (0.002<원하는시간> * (16000000<클럭>/256<분주비>)) = 130
