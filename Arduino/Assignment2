//Operating stepper motor, IR sensor, LCD shield
//libraries
#include <LiquidCrystal.h>

//definitions
#define btnRIGHT 0
#define btnUP 1
#define btnDOWN 2
#define btnLEFT 3
#define btnSELECT 4
#define btnNONE 5

//variables
unsigned int centimetres = 0;
unsigned int sensor_read = 0;
int seconds = 0;
int minutes = 0;
int lcd_key = 0;
int ADCvalue = 0;
int currentMode = 0; // 0:스타트, 1:디버그, 2: IR, 3:CM, 4:PM

int timerCount = 0;
int debouncerCount = 0;
int blinkCounter = 0;
int countIR = 0;
int countCM = 0;
int countPM = 0;

int blinkCheck = 0;

bool buttonDelay = false;

unsigned int steppers = 0;
int steps = 0;
int speed = 2; // 1:L, 2:M, 3:H
bool direction = true; // true : CW, false : CCW, default is CW


unsigned int angle = 0; //angle is always positive since unsigned is used
bool isPMWorking = false; //integer isPMWorking is false as its default

int pos = 1;
int cmPos = 1;

LiquidCrystal lcd(8, 9, 4, 5, 6, 7);

void setup() {
  //interrupt Setup
  TCCR0A = (1 << WGM01); //enable CTC mode (pg 143)
  TCCR0B = (1 << CS02); //256 prescaler
  OCR0A = 78; //ticks
  TCNT0 = 0;
  TIMSK0 = (1 << OCIE0A);
  //ADC Setup
  ADMUX = (1 << REFS0); //AVcc
  ADCSRA = (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2) | (1 << ADIE); //enable ADC, prescaler select, interrupt enable
  DIDR0 = (1 << ADC0D);
  ADC_Init();
  //LCD Setup
  lcd.begin(16, 2);
  lcd.setCursor(0, 0);
  lcd.print("00:00");
  lcd.setCursor(0, 1);
  lcd.print("SID:13006010");
  //motor Setup
  DDRD = 0xFF; //in binary: 1111, makes it all output
  //  Serial.begin(9600);
  sei(); //set external interrupts
}

int read_LCD_buttons() {
  if (ADCvalue > 1000) return btnNONE;
  if (ADCvalue < 50) return btnRIGHT;
  if (ADCvalue < 195) return btnUP;
  if (ADCvalue < 380) return btnDOWN;
  if (ADCvalue < 555) return btnLEFT;
  if (ADCvalue < 790) return btnSELECT;
  return btnNONE;
}

void ADC_Init() {
  ADCSRA |= (1 << ADSC); //start conversion
}

void buttonLCD() {// 0:스타트, 1:디버그, 2: IR, 3:CM, 4:PM , 5:CM작동
  switch (lcd_key) {
    case btnRIGHT: { //오른쪽 버튼이 눌렸을때의 상황들
        if (currentMode == 1) { //만약 currentMode 1에 들어갔다면,
          pos++; //포지션을 하나 증가 시킨다
          if (pos >= 3)pos = 3; //만약 포지션이 3보다 크거나 같으면 포지션을 3에 고정시킨다(다른 모드로 넘어가지 않게, 조금의 에러도 방지)
        }

        if (currentMode == 3) { //currentMode가 3 (CM 모드)
          cmPos++;    //cmPos를 1 증가시킨다.
          if (cmPos >= 2)cmPos = 2; //2보다 크거나 같으면 2로 고정시킨다
        }
        if (currentMode == 4) { //currentMode가 4, PM mode에 들어간 상황
          //모터 작동
          steppers = angle * 5.7;    //(4096/2)/360=5.688
          isPMWorking = true;
        }
        if (currentMode == 5) { //cm mode -> start button is pressed
          direction = true; //rotating direction is true, CW
          lcd.setCursor(0, 1);
          if (direction)lcd.print("DIR: CW  "); //처음에 스타트를 눌렀을땐 화면에 DIR: CW 라고 뜬다
          else lcd.print("DIR:CCW  ");

          if (speed == 1)lcd.print("SPEED:L:");
          if (speed == 2)lcd.print("SPEED:M");
          if (speed == 3)lcd.print("SPEED:H");
        }
        break;
      }
    case btnLEFT: {
        if (currentMode == 1) {
          pos--;
          if (pos <= 1)pos = 1;
        }

        if (currentMode == 3) {
          cmPos--;
          if (cmPos <= 1)cmPos = 1;
        }
        if (currentMode == 4) {
          //각도를 0으로
          if (!isPMWorking)angle = 0;
          lcd.setCursor(0, 1);
          lcd.print("     ");
          lcd.setCursor(0, 1);
          lcd.print(angle);
        }
        if (currentMode == 5) {
          direction = false;
          lcd.setCursor(0, 1);
          if (direction)lcd.print("DIR: CW  ");
          else lcd.print("DIR:CCW  ");

          if (speed == 1)lcd.print("SPEED:L:");
          if (speed == 2)lcd.print("SPEED:M");
          if (speed == 3)lcd.print("SPEED:H");
        }
        break;
      }
    case btnUP: {
        if (currentMode == 4) {
          //각도 15도 증가
          if (!isPMWorking)angle += 15;
          lcd.setCursor(0, 1);
          lcd.print("     ");
          lcd.setCursor(0, 1);
          lcd.print(angle);
        }
        if (currentMode == 5) {
          speed++;
          if (speed >= 3)speed = 3;
          lcd.setCursor(0, 1);
          if (direction)lcd.print("DIR: CW  ");
          else lcd.print("DIR:CCW  ");

          if (speed == 1)lcd.print("SPEED:L:");
          if (speed == 2)lcd.print("SPEED:M");
          if (speed == 3)lcd.print("SPEED:H");
        }
        break;
      }
    case btnDOWN: {
        if (currentMode == 4) {
          //각도 15도 감소
          if (!isPMWorking && angle >= 15)angle -= 15;
          lcd.setCursor(0, 1);
          lcd.print("     ");
          lcd.setCursor(0, 1);
          lcd.print(angle);
        }
        if (currentMode == 5) {
          speed--;
          if (speed <= 1)speed = 1;
          lcd.setCursor(0, 1);
          if (direction)lcd.print("DIR: CW  ");
          else lcd.print("DIR:CCW  ");

          if (speed == 1)lcd.print("SPEED:L:");
          if (speed == 2)lcd.print("SPEED:M");
          if (speed == 3)lcd.print("SPEED:H");
        }
        break;
      }
    case btnSELECT: {
        modeChange();
        break;
      }
    case btnNONE: {
        break;
      }
  }
}
void modeChange() {  // 0:스타트, 1:디버그, 2: IR, 3:CM, 4:PM , 5:CM작동
  if (currentMode == 0) {
    currentMode = 1;
  }
  else if (currentMode == 1) {
    if (pos == 1) {
      currentMode = 2;
      //IR모드에 들어가는 코드
    }
    if (pos == 2) {
      currentMode = 3;
      //CM모드에 들어가는 코드
    }
    if (pos == 3) {
      currentMode = 4;
      //PM모드에 들어가는 코드
    }
  }
  else if (currentMode == 2) {
    currentMode = 1;
  }
  else if (currentMode == 3) {
    if (cmPos == 1) { //start
      currentMode = 5;
    }
    else {
      currentMode = 1;
      cmPos = 1;
    }
  }
  else if (currentMode == 4) {
    currentMode = 1;
  }
  else if (currentMode == 5) {
    currentMode = 3;
  }

  switch (currentMode) {
    case 1:
      lcd.clear();
      lcd.print("DEBUG MODE");
      lcd.setCursor(0, 1);
      lcd.print("IR CM PM");
      break;
    case 2:
      lcd.clear();
      lcd.print("IR MODE");
      lcd.setCursor(0, 1);
      break;
    case 3:
      lcd.clear();
      lcd.print("CM MODE");
      lcd.setCursor(0, 1);
      lcd.print("START EXIT");
      break;
    case 4:
      steppers = 0;
      angle = 0;      
      direction = true;
      speed = 2;
      lcd.clear();
      lcd.print("PM MODE");
      lcd.setCursor(0, 1);
      lcd.print(angle);
      break;
    case 5:
      lcd.setCursor(0, 1);
      lcd.print("DIR: CW  SPEED:M");
      direction = true;
      speed = 2;
      break;
  }
}

void loop() {
  Serial.println(ADCvalue); //for some reason the code works when this is here. doesn't actually start the serial monitor
//  Serial.println(currentMode);
  //Serial.print(" ");
  //Serial.print(centimetres);
  //Serial.println();
  if ((ADCvalue <= 1000) && (buttonDelay == false)) { //if a button is being pressed then read what button is being pressed (in interrupt)
    buttonDelay = true;
  }
}

void printTime() {
  lcd.setCursor(0, 0);
  if (minutes < 10) {
    lcd.print("0");
  }
  lcd.print(minutes);
  lcd.print(":");
  if (seconds < 10) {
    lcd.print("0");
  }
  lcd.print(seconds);
}

ISR(TIMER0_COMPA_vect) { //interrupts - think of it like juggling or a loop, you'd want this to happen alongside everything else
  timerCount++; //for the clock
  if (timerCount >= 1000&&currentMode == 0) { //when this counter reaches 1 second //timer가 계속해서 시간이 지나다가 timerCount가 1초가 되면 second라는 함수가 1 증가한다.
    seconds++;
    if (seconds == 60) { //증가하는 second의 함수가 60을 도달했을때, 60과 같아 졌을때 minutes라는 함수가 1 증하한다.
      minutes++;
      seconds = 0;  //minutes함수가 1 증가함과 동시에 seconds함수를 0으로 만들어라.
    }
    printTime();
    timerCount = 0;      // 이부분 무슨 의미인지 다시 물어보기
  }
  //if statement는 원래 순서가 중요하지만 함수들이 각자 변수에 들어가 있을때는 크게 영향을 받지 않는다.

  debouncerCount++; //debouncer: a button delay in between presses (250 ms, could be any number)
  if ((debouncerCount >= 250) && (ADCvalue <= 1000) && (buttonDelay == true)) {
    lcd_key = read_LCD_buttons();
    buttonLCD();
    buttonDelay = false;
    debouncerCount = 0;
  }
  
  blinkCounter++; //after 500 ms show Debug mode Select Blink
  if ((blinkCounter >= 500) && ((currentMode == 1) || (currentMode == 3))) {
//    Serial.println("OK");
    blinkCheck++;
    if (blinkCheck >= 2)blinkCheck = 0;
    lcd.setCursor(0, 1);
    if (currentMode == 1) {
      if (blinkCheck == 0) lcd.print("IR CM PM");
      else {
        if (pos == 1)lcd.print("   CM PM");
        if (pos == 2)lcd.print("IR    PM");
        if (pos == 3)lcd.print("IR CM   ");
      }
    }
    else if (currentMode == 3) {
      if (blinkCheck == 0) lcd.print("START EXIT");
      else {
        if (cmPos == 1)lcd.print("      EXIT");
        if (cmPos == 2)lcd.print("START     ");
      }
    }
    blinkCounter = 0;
  }
  
  countIR++; // show IR Mode
  if ((currentMode == 2) && (countIR >= 200)) { // 0.2초마다 ir센서 거리 측정
    centimetres = 10650.08 * exp(-0.935 * log(sensor_read)) - 10;

    if (centimetres > 150){
      lcd.setCursor(0, 1);
      lcd.print("OUT OF RANGE!");
    }
    else {
      lcd.setCursor(0, 1);
      lcd.print("                ");
      lcd.setCursor(0, 1);
      lcd.print(centimetres);
      lcd.setCursor(3, 1);
      lcd.print("cm");
    }
    countIR = 0;
  }
  
  countCM++;
  int speedCounter = 0; // speedCounter가 높을수록 모터 회전속도는 느림
  if (speed == 1)speedCounter = 8;
  else if (speed == 2)speedCounter = 5;
  else if (speed == 3)speedCounter = 2;

  if ((countCM >= speedCounter) && (currentMode == 5) ) {
    stepperMotor(direction);
    countCM = 0;
  }

  countPM++;
  if ((countPM >= speed) && (currentMode == 4) && isPMWorking) {
    if (steppers > 0) {
      stepperMotor(true);
      steppers--; //decrements until steppers = 0 so that the motor stops spinning
      unsigned int tempAngle = angle;
      angle = steppers / 5.7;
      if (tempAngle != angle) {
        lcd.setCursor(0, 1);
        lcd.print("     ");
        lcd.setCursor(0, 1);
        lcd.print(angle);
      }
    }
    else {
      isPMWorking = false;
    }
    countPM = 0;
  }
}

ISR(ADC_vect) {
  switch (ADMUX) {
    case 0x40: { //0b1000000
        ADCvalue = ADC;
        ADMUX = 0x41;
        ADC_Init();
        break;
      }
    case 0x41: { //0b1000001
        sensor_read = ADC;
        ADMUX = 0x40;
        ADC_Init();
        break;
      }
    default: {
        break;
      }
  }
}

void stepperMotor(bool dir) { //this function makes it take 1 step
  if (dir) {
    switch (steps) {
      case 0: {
          PORTD &= ~ (1 << PD0);
          PORTD &= ~ (1 << PD1);
          PORTD &= ~ (1 << PD2);
          PORTD |= (1 << PD3);
          break;
        }
      case 1: {
          PORTD &= ~ (1 << PD0);
          PORTD &= ~ (1 << PD1);
          PORTD |= (1 << PD2);
          PORTD &= ~ (1 << PD3);
          break;
        }
      case 2: {
          PORTD &= ~ (1 << PD0);
          PORTD |= (1 << PD1);
          PORTD &= ~ (1 << PD2);
          PORTD &= ~ (1 << PD3);
          break;
        }
      case 3: {
          PORTD |= (1 << PD0);
          PORTD &= ~ (1 << PD1);
          PORTD &= ~ (1 << PD2);
          PORTD &= ~ (1 << PD3);
        }
    }
  }
  else {
    switch (steps) {
      case 0: {
          PORTD |= (1 << PD0);
          PORTD &= ~ (1 << PD1);
          PORTD &= ~ (1 << PD2);
          PORTD &= ~ (1 << PD3);
          break;
        }
      case 1: {
          PORTD &= ~ (1 << PD0);
          PORTD |= (1 << PD1);
          PORTD &= ~ (1 << PD2);
          PORTD &= ~ (1 << PD3);
          break;
        }
      case 2: {
          PORTD &= ~ (1 << PD0);
          PORTD &= ~ (1 << PD1);
          PORTD |= (1 << PD2);
          PORTD &= ~ (1 << PD3);
          break;
        }
      case 3: {
          PORTD &= ~ (1 << PD0);
          PORTD &= ~ (1 << PD1);
          PORTD &= ~ (1 << PD2);
          PORTD |= (1 << PD3);
          break;
        }
    }
  }
  steps++;
  if (steps > 3) { //increment and then makes sure it doesn't go over 3
    steps = 0;
  }
}
