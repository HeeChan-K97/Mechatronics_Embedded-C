//libraries
#include <LiquidCrystal.h>

//definitions
#define btnRIGHT 0
#define btnUP 1
#define btnDOWN 2
#define btnLEFT 3
#define btnSELECT 4
#define btnNONE 5

unsigned int sensor_read = 0;
int lcd_key = 0;
int ADCvalue = 0;
int currentMode = 0; // 0:스타트, 1:메인, 2: 제어, 3:빙글, 4:벽타기

bool buttonDelay = false;

LiquidCrystal lcd(8, 9, 4, 5, 6, 7);

int debouncerCount = 0;
int blinkCounter = 0;
int countWF = 0;

int blinkCheck = 0;

int pos = 1;

boolean isSweeping = false;
boolean isWallFollowing = false;
boolean isSweeped = false;

void setup() {
  //interrupt - 1 ms timer //calculated via https://eleccelerator.com/avr-timer-calculator/
  TCCR0A = (1 << WGM01); //enable CTC mode (pg 143)
  TCCR0B = (1 << CS02); //256 prescaler
  OCR0A = 78; //ticks
  TCNT0 = 0;
  TIMSK0 = (1 << OCIE0A);
  //ADC
  ADMUX = (1 << REFS0); //AVcc
  ADCSRA = (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2) | (1 << ADIE); //enable ADC, prescaler select, interrupt enable
  DIDR0 = (1 << ADC0D);
  ADC_Init();
  //LCD
  lcd.begin(16, 2); //sets the "coordinates" for the LCD screen
  lcd.setCursor(0, 0);
  lcd.print("SID:13006010");
  lcd.setCursor(0, 1);
  lcd.print("Main Menu");
  Serial.begin(4800);
  PrintMessage("CMD_START");  // Start the robot
  sei(); //set external interrupts
}

int read_LCD_buttons() { //taken from exercise
  if (ADCvalue > 1000) return btnNONE;
  if (ADCvalue < 50) return btnRIGHT;
  if (ADCvalue < 195) return btnUP;
  if (ADCvalue < 380) return btnDOWN;
  if (ADCvalue < 555) return btnLEFT;
  if (ADCvalue < 790) return btnSELECT;
  return btnNONE;
}

void ADC_Init() {
  ADCSRA |= (1 << ADSC); //start conversion
}

void buttonLCD() {
  switch (lcd_key) {
    case btnRIGHT: {
        break;
      }
    case btnLEFT: {
        break;
      }
    case btnUP: {
        if (currentMode == 4) {
          isWallFollowing = false;
        }
        break;
      }
    case btnDOWN: {
        if (currentMode == 1) {
          pos++;
          if (pos > 3)pos = 1;
        }
        break;
      }
    case btnSELECT: {
        modeChange();
        break;
      }
    case btnNONE: {
        break;
      }
  }
}

void modeChange() {  // 0:스타트, 1:메인, 2: 제어, 3:빙글, 4:벽타기
  if (currentMode == 1) {
    if (pos == 1) {
      currentMode = 2;
    }
    else if (pos == 2) {
      currentMode = 3;
    }
    else if (pos == 3) {
      currentMode = 4;
    }
  }
  else {
    currentMode = 1;
    isSweeped = false;
  }

  switch (currentMode) {
    case 1:
      lcd.clear();
      lcd.print("Mode Select");
      lcd.setCursor(0, 1);
      lcd.print("Ctrl Sweep WF");
      break;
    case 2:
      lcd.clear();
      lcd.setCursor(0, 1);
      lcd.print("Control Mode");
      break;
    case 3:
      lcd.clear();
      lcd.setCursor(0, 1);
      lcd.print("Sweep Mode");
      break;
    case 4:
      lcd.clear();
      lcd.setCursor(0, 1);
      lcd.print("Wall Follow Mode");
      isWallFollowing = true;
      break;
  }
}

ISR(ADC_vect) {
  switch (ADMUX) {
    case 0x40: { //0b1000000
        ADCvalue = ADC;
        ADC_Init();
        break;
      }
    default: {
        break;
      }
  }
}

ISR(TIMER0_COMPA_vect) { //interrupts - think of it like juggling or a loop, you'd want this to happen alongside everything else
  debouncerCount++; //debouncer: a button delay in between presses (250 ms, could be any number)
  if ((debouncerCount >= 250) && (ADCvalue <= 1000) && (buttonDelay == true)) {
    lcd_key = read_LCD_buttons();
    buttonLCD();
    buttonDelay = false;
    debouncerCount = 0;
  }

  blinkCounter++; //after 500 ms show Debug mode Select Blink
  if ((blinkCounter >= 500) && currentMode == 1) {
    blinkCheck++;
    if (blinkCheck >= 2)blinkCheck = 0;
    lcd.setCursor(0, 1);
    if (currentMode == 1) {
      if (blinkCheck == 0) lcd.print("Ctrl Sweep WF");
      else {
        if (pos == 1)lcd.print("     Sweep WF");
        if (pos == 2)lcd.print("Ctrl       WF");
        if (pos == 3)lcd.print("Ctrl Sweep   ");
      }
    }
    blinkCounter = 0;
  }
}

void PrintMessage(String message) {
  Serial.print(message);
  Serial.write(13); //carriage return character (ASCII 13, or '\r')
  Serial.write(10); //newline character (ASCII 10, or '\n')
}

void loop() {
  //  Serial.println(ADCvalue); //for some reason the code works when this is here. doesn't actually start the serial monitor
  //  Serial.println(currentMode);
  if ((ADCvalue <= 1000) && (buttonDelay == false)) { //if a button is being pressed then read what button is being pressed (in interrupt)
    buttonDelay = true;
  }

  if (currentMode == 2 && buttonDelay == false) {
    lcd_key = read_LCD_buttons();
    switch (lcd_key) {
      case btnRIGHT: {
          PrintMessage("CMD_ACT_ROT_1_5 ");
          break;
        }
      case btnLEFT: {
          PrintMessage("CMD_ACT_ROT_0_5 ");
          break;
        }
      case btnUP: {
          PrintMessage("CMD_ACT_LAT_1_1 ");
          break;
        }
      case btnDOWN: {
          PrintMessage("CMD_ACT_LAT_0_1 ");
          break;
        }
      case btnSELECT: {
          break;
        }
      case btnNONE: {
          break;
        }
    }
  }
  if (currentMode == 3 && buttonDelay == false) {
    lcd_key = read_LCD_buttons();
    switch (lcd_key) {
      case btnUP: {
          isSweeping = true;

          break;
        }
    }
  }
  if (currentMode == 3 && isSweeping) {
    float minData = 999.99;
    int minAngle = 0;
    for (int i = 0; i < 360; i++) {
      PrintMessage("CMD_SEN_IR");        // Query the sensor reading
      Serial.setTimeout(0);
      String incomingByte = Serial.readString(); // Read the incoming value
      float data = incomingByte.toFloat();
      Serial.println(data);
      if (data > 0.0) {
        if (minData > data) {
          minData = data;
          minAngle = i;
          Serial.println("minAngle : " + String(minAngle));
        }
      }
      PrintMessage("CMD_ACT_ROT_1_1 ");
    }

    for (int i = 360; i > minAngle; i--) {
      PrintMessage("CMD_ACT_ROT_0_1");
      Serial.println(i);
    }
    isSweeping = false;
  }
  if (currentMode == 4 && isWallFollowing) {
    if (!isSweeped) {
      float minData = 999.99;
      int minAngle = 0;
      for (int i = 0; i < 360; i++) {
        PrintMessage("CMD_SEN_IR");        // Query the sensor reading
        Serial.setTimeout(0);
        String incomingByte = Serial.readString(); // Read the incoming value
        float data = incomingByte.toFloat();
        Serial.println(data);
        if (data > 0.0) {
          if (minData > data) {
            minData = data;
            minAngle = i;
            Serial.println("minAngle : " + String(minAngle));
          }
        }
        PrintMessage("CMD_ACT_ROT_1_1 ");
      }

      for (int i = 360; i > minAngle; i--) {
        PrintMessage("CMD_ACT_ROT_0_1");
        Serial.println(i);
      }
      isSweeped = true;
    }
    else {
      PrintMessage("CMD_SEN_IR");        // Query the sensor reading
      Serial.setTimeout(0);
      String incomingByte = Serial.readString(); // Read the incoming value
      float data = incomingByte.toFloat();
      if (data == 0 || data > 2.3) {
        PrintMessage("CMD_ACT_LAT_1_0.5 ");
      }
      else {
        PrintMessage("CMD_ACT_ROT_1_90 ");
      }
    }
  }
}
